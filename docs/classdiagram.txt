classDiagram
  class Admin {
      +manageRetailPartners(): void
      +resolveUserIssues(): void
      +managePlatform(): void
      +monitorSecurity(): void
  }
  class User {
      - userId: UUID
      - name: String
      - email: String
      - passwordHash: String
      - profilePicture: String
      + login(): boolean
      + updateProfile(): void
      + readPersonalProfile(): Profile
      + readInvitation(event: Event): Invitation
      + readProfile(username: String): Profile
      + reportEvent(event: Event): void
      + reportProfile(user: User): void
      + viewItemDetails(event: Event): WishlistItem
      + filterItems(event: Event): WishlistItem[]
  }
  class EventPlanner {
      + createEvent(): Event
      + removeEvent(event: Event): void
      + sendInvitation(event: Event): void
      + manageWishlist(event: Event): void
      + viewAnalytics(event: Event): Analytics
      + manageGallery(event: Event): void
      + receiveContribution(event: Event): void
  }
  class RetailPartner {
      - partnerId: UUID
      - name: String
      - apiEndpoint: String
      + provideCatalog(): List<Item>
  }
  class Event {
      - eventId: UUID
      - title: String
      - dateTime: DateTime
      - location: String
      - description: String
      - enableWishlist: boolean
      - enableGallery: boolean
      + publishEvent(): void
      + addGuest(user: User): void
  }
  class Guest {
      + viewEvent(event: Event): void
      + leaveEvent(event: Event): void
      + contributeGift(event: Event): Contribution
      + markItemReserved(event: Event, item: WishlistItem): void
      + uploadMedia(event: Event): void
      + requestRefund(event: Event): void
  }
  class Wishlist {
      - wishlistId: UUID
      - eventId: UUID
      + addItem(item: WishlistItem): void
      + removeItem(itemId: UUID): void
  }
  class WishlistItem {
    - itemId: UUID
    - partnerId: UUID
    - name: String
    - description: String
    - quantity: int
    - price: float
    - fulfilled: boolean
    + reserve(): void
    + contribute(amount: float): void
  }
  class Invitation {
      - invitationId: UUID
      - eventId: UUID
      - guestId: UUID
      - status: String
      - method: String
      - createdAt: DateTime
  }
  class StripeConnect {
      + processPayment(): boolean
      + refundPayment(): boolean
      + getTransactionHistory(): List<Transaction>
  }
  class Contribution {
      - contributionId: UUID
      - itemId: UUID
      - guestId: UUID
      - amount: float
      - date: DateTime
  }
  class Media {
      - mediaId: UUID
      - eventId: UUID
      - uploaderId: UUID
      - type: String
      - fileUrl: String
      - approved: boolean
  }
  Admin ..> User : resolves issues
  Admin ..> RetailPartner : manages
  EventPlanner ..> Event : creates
  EventPlanner ..> Wishlist : manages
  EventPlanner ..> Media : moderates
  EventPlanner ..> Contribution : receives
  User <|-- Guest
  User <|-- EventPlanner
  Guest ..> Event : views
  Guest ..> Wishlist : reserves
  Guest ..> Contribution : contributes
  Guest ..> Media : uploads
  Event ..> Wishlist
  Event ..> Invitation
  Wishlist ..> WishlistItem
  WishlistItem <|-- RetailPartner : sourced from
  Invitation ..> Guest
  StripeConnect ..> Contribution : processes
