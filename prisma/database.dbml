
// https://dbdiagram.io/d/GiftHub-68038bc91ca52373f5920a71
// 0. enum
// 1. default models
// 2. implemented components - main data
// 3. event components
// 4. actions
// 5. reports
// 6. notifications

//! enum

ENUM StatusType {
  PENDING
  ACCEPTED
  // REJECTED: if rejected => delete row
}

ENUM PriorityType {
  LOW
  MEDIUM
  HIGH
}

/// we keep this in case of new types of marks
ENUM MarkType {
  PURCHASED
  // NULL: if null => delete row
}

ENUM StatusPayment {
  PENDING
  ACCEPTED
  EXPIRED
}

//! implemented models - main data

TABLE User {
  username STRING pk
  email STRING
  id STRING
  fname STRING
  lname STRING
  password STRING
  stripeConnectId STRING // NOT UNIQUE: only one null value allowed
  emailToken STRING // NOT UNIQUE: only one null value allowed
  tokenExpires DATETIME
  pictureUrl STRING

  emailVerified DATETIME
  createdAt DATETIME
  updatedAt DATETIME
}

TABLE Invitation {
  id INTEGER pk
  guestUsername STRING [ref: > User.username]
  eventId INTEGER [ref: > Event.id]

  status StatusType
  createdAt DATETIME
  repliedAt DATETIME
}

TABLE Event {
  id INTEGER pk
  title STRING
  description STRING
  location STRING
  date DATETIME
  time DATETIME
  pictureUrl STRING
  token STRING

  createdByUsername STRING [ref: > User.username]
  createdAt DATETIME
  updatedAt DATETIME
}

//! event components

// junction TABLE for event-specific wishlist entry
TABLE EventArticle {
  id INTEGER PK
  eventId INTEGER [ref: > Event.id]
  itemId INTEGER [ref: > Item.id]
  userNote STRING // additional note
  priority PriorityType
  createdAt DATETIME
  updatedAt DATETIME
}

TABLE Item {
  id INGETER pk
  name STRING
  description STRING
  imagesUrl STRING
  price DECIMAL

  retailerId INTEGER [ref: > Retailer.id] //! NULL => custom item
  retailerUrl STRING

  createdAt DATETIME
  updatedAt DATETIME
}

TABLE Retailer {
  id INTEGER pk
  name STRING
  apiUrl STRING
}

//! actions
TABLE Media {
  id INTEGER pk
  uploaderUsername STRING [ref: > User.username]
  eventId INTEGER [ref: > Event.id] // Directly linked to the event
  url STRING

  caption STRING
  mediaType STRING
  fileType STRING
  fileSize INTEGER
  createdAt DATETIME
}

//! real money
//! SetDefault = deleted content
//! it is about real money, do not delete records

TABLE StripeLink {
  id STRING PK
  guestUsername STRING [ref: > User.username]
  eventId INTEGER [ref: > Event.id] /// required by prisma
  articleId INTEGER [ref: > EventArticle.id] // optional: `direct contribution` case
  itemId INTEGER [ref: > Item.id] /// required by prisma

  stripePaymentLinkId STRING
  paymentLinkUrl STRING // reusable redirecting link

  amount DECIMAL
  currency STRING
  status StatusPayment

  createdAt DATETIME
  updatedAt DATETIME
}

TABLE Contribution {
  id INTEGER pk
  guestUsername STRING [ref: > User.username]
  eventId INTEGER [ref: > Event.id]
  articleId INTEGER [ref: > EventArticle.id]
  itemId INTEGER [ref: > Item.id]

  cashAmount DECIMAL
  currency STRING
  createdAt DATETIME
  updatedAt DATETIME //! updated only if SetDefault
}

TABLE Mark {
  markerUsername STRING [ref: > User.username] // always a Guest
  eventId INTEGER [ref: > Event.id] /// required by prisma
  articleId INTEGER [ref: > EventArticle.id]
  itemId INTEGER [ref: > Item.id] /// required by prisma

  type MarkType
  createdAt DATETIME
}

//! reports

TABLE UserReport {
  id INTEGER pk
  reportedByUsername STRING [ref: > User.username] // NOT always a Guest
  reportedUsername STRING [ref: > User.username]
  reason STRING
  description STRING
  reportedAt DATETIME
}

TABLE EventReport {
  id INTEGER pk
  reportedByUsername STRING [ref: > User.username]
  reportedId INTEGER [ref: > Event.id]
  reason STRING
  description STRING
  reportedAt DATETIME
}

//! notification

ENUM NotificationAction {
  READ
  DELETE
}

TABLE MediaNotification {
  id INTEGER pk
  username STRING [ref: > User.username]
  mediaId INTEGER [ref: > Media.id]
  action NotificationAction
}

TABLE ContributionNotification {
  id INTEGER pk
  username STRING [ref: > User.username]
  contributionId INTEGER [ref: > Contribution.id]
  action NotificationAction
}
