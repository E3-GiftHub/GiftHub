/**
 * ! documentation
 * https://pris.ly/d/prisma-schema
 * https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
 * https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
 */

generator client {
  provider = "prisma-client-js"
  // output   = "node_modules/.prisma/client" // Default, asigurați-vă că aici caută aplicația sau eliminați dacă nu este personalizat
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//! enum

enum StatusType {
  PENDING
  ACCEPTED
 // REJECTED: if rejected => delete row
}

enum PriorityType {
  LOW
  MEDIUM
  HIGH
}

/// we keep this in case of new types of marks
enum MarkType {
  PURCHASED
  // NULL: if null => delete row
}

//! default models

model Account {
  id                    String  @id @default(cuid())
  userUsername          String
  type                  String
  provider              String
  providerAccountId     String
  refreshToken          String?
  accessToken           String?
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String?
  sessionState          String?
  refreshTokenExpiresIn Int?

  user User @relation(fields: [userUsername], references: [username], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userUsername String
  expires      DateTime

  user User @relation(fields: [userUsername], references: [username], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//! implemented models

model User {
  username        String  @id @unique @default(cuid()) // Acesta este ID-ul principal
  email           String? @unique
  fname           String?
  lname           String?
  password        String? // stored with hash obviously
  iban            String?
  stripeConnectId String? @unique
  pictureUrl      String?

  emailVerified DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // relations
  eventsCreated Event[]
  invitations   Invitation[]

  postsMedia    Media[]
  marks         Mark[]
  contributions Contribution[]

  reporters     UserReport[]  @relation("reporter")
  reportedUsers UserReport[]  @relation("reported")
  eventReports  EventReport[]

  // mandatory assets
  accounts                 Account[]
  sessions                 Session[]
  MediaNotification        MediaNotification[]
  ContributionNotification ContributionNotification[]
  StripeLink               StripeLink[]
}

model Event {
  id                Int       @id @default(autoincrement())
  title             String?
  description       String?
  location          String?
  date              DateTime?
  time              DateTime?
  pictureUrl        String?

  createdByUsername String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [createdByUsername], references: [username])

  invitations   Invitation[]
  postsMedia    Media[]
  marks         Mark[]
  contributions Contribution[]
  eventArticles EventArticle[]
  eventReports  EventReport[]
  StripeLink    StripeLink[]
}

model Invitation {
  id            Int      @id @default(autoincrement())
  guestUsername String
  eventId       Int

  status    StatusType @default(PENDING)
  createdAt DateTime   @default(now())
  repliedAt DateTime?

  guest User  @relation(fields: [guestUsername], references: [username])
  event Event @relation(fields: [eventId], references: [id])

  @@index([guestUsername])
}

model Media {
  id               Int      @id @default(autoincrement())
  uploaderUsername String
  eventId          Int
  url              String

  caption   String?
  mediaType String?
  fileType  String?
  fileSize  Int?
  createdAt DateTime @default(now())

  user              User                @relation(fields: [uploaderUsername], references: [username])
  event             Event               @relation(fields: [eventId], references: [id])
  MediaNotification MediaNotification[]
}

// junction TABLE for event-specific wishlist entry
model EventArticle {
  eventId  Int
  itemId   Int
  userNote String? // additional note
  priority PriorityType?
  quantityRequested Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  item  Item? @relation(fields: [itemId], references: [id]) // Lăsat opțional aici dacă un EventArticle poate exista fără un Item specific (deși itemId e parte din PK)

  @@id([eventId, itemId])
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String?
  description String?
  imagesUrl   String?
  price       Decimal?

  retailerId Int? //! NULL => custom item
  retailer   Retailer? @relation(fields: [retailerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventOccurences EventArticle[]
  marks           Mark[]
  contributions   Contribution[]
  StripeLink      StripeLink[]
}

model Mark {
  markerUsername String // always a Guest
  eventId        Int
  articleId      Int

  type      MarkType
  createdAt DateTime @default(now())

  guest User  @relation(fields: [markerUsername], references: [username])
  event Event @relation(fields: [eventId], references: [id])
  item  Item  @relation(fields: [articleId], references: [id])

  @@id([eventId, articleId]) // Consideră dacă un user poate marca același articol de mai multe ori sau dacă aceasta e constrângerea.
                            // Dacă un user poate marca o singură dată, adaugă markerUsername la @@id.
}

model Retailer {
  id     Int     @id @default(autoincrement())
  name   String?
  apiUrl String?
  items  Item[]
}

// --- MODIFICAT Contribution ---
model Contribution {
  id                  Int      @id @default(autoincrement())
  contributorUsername String
  eventId             Int
  articleId           Int       // Obligatoriu, conform schemei tale inițiale pentru acest model

  cashAmount            Decimal
  currency              String    // NOU: Moneda contribuției (ex: "eur", "ron")
  stripePaymentLinkId   String    // NOU și Obligatoriu: ID-ul Payment Link-ului asociat (pl_xxxx)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  guest User  @relation(fields: [contributorUsername], references: [username])
  event Event @relation(fields: [eventId], references: [id])
  item  Item  @relation(fields: [articleId], references: [id])

  ContributionNotification ContributionNotification[]

  @@index([stripePaymentLinkId])
  @@index([contributorUsername])
  @@index([eventId])
  @@index([articleId])
}
// --- SFÂRȘIT MODIFICAT Contribution ---

//! reports

model UserReport {
  id                 Int      @id @default(autoincrement())
  reportedByUsername String
  reportedUsername   String
  reason             String?
  description        String?
  createdAt          DateTime @default(now())

  userHell User @relation("reported", fields: [reportedUsername], references: [username])
  userSane User @relation("reporter", fields: [reportedByUsername], references: [username])
}

model EventReport {
  id                 Int      @id @default(autoincrement())
  reportedByUsername String
  reportedId         Int
  reason             String?
  description        String?
  createdAt          DateTime @default(now())

  user  User  @relation(fields: [reportedByUsername], references: [username])
  event Event @relation(fields: [reportedId], references: [id])
}

//! notification

enum NotificationAction {
  READ
  DELETE
}

model MediaNotification {
  id       Int                @id @default(autoincrement())
  username String
  mediaId  Int
  action   NotificationAction

  user  User  @relation(fields: [username], references: [username])
  media Media @relation(fields: [mediaId], references: [id])
}

model ContributionNotification {
  id             Int                @id @default(autoincrement())
  username       String
  contributionId Int
  action         NotificationAction

  user User         @relation(fields: [username], references: [username])
  cash Contribution @relation(fields: [contributionId], references: [id])
}

// --- MODIFICAT StripeLink ---
model StripeLink {
  id                String  @id @default(cuid())
  
  stripePaymentLinkId String  @unique // NOU și Obligatoriu: ID-ul Payment Link-ului (pl_xxxx)
  paymentLinkUrl      String           // NOU și Obligatoriu: URL-ul Payment Link-ului
  
  amount            Decimal
  currency            String           // NOU: Moneda (ex: "eur", "ron")

  // active Boolean @default(true) // Eliminat în favoarea 'status'
  status              String           // NOU: Starea link-ului (ex: "pending", "completed", "expired")

  eventId         Int
  articleId       Int                // Obligatoriu, conform schemei tale inițiale
  creatorUsername String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  creator User  @relation(fields: [creatorUsername], references: [username], onDelete: Cascade)
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade) // Recomand Cascade
  item    Item  @relation(fields: [articleId], references: [id], onDelete: Cascade) // Recomand Cascade

  @@index([stripePaymentLinkId])
  @@index([creatorUsername, eventId, articleId, amount, currency, status]) // Index actualizat
}