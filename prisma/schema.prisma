/**
 * ! documentation
 * https://pris.ly/d/prisma-schema
 * https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
 * https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
 */

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

//! enum

enum StatusType {
    PENDING
    ACCEPTED
    // REJECTED: if rejected => delete row
}

enum PriorityType {
    LOW
    MEDIUM
    HIGH
}

/// we keep this in case of new types of marks
enum MarkType {
    PURCHASED
    // NULL: if null => delete row
}

//! default models

model Account {
    id                    String  @id @default(cuid())
    userUsername          String
    type                  String
    provider              String
    providerAccountId     String
    refreshToken          String?
    accessToken           String?
    expiresAt             Int?
    tokenType             String?
    scope                 String?
    idToken               String?
    sessionState          String?
    refreshTokenExpiresIn Int?

    user User @relation(fields: [userUsername], references: [username], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userUsername String
    expires      DateTime

    user User @relation(fields: [userUsername], references: [username], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//! implemented models

model User {
    username        String  @id @unique @default(cuid())
    email           String? @unique
    id              String? @unique
    fname           String?
    lname           String?
    password        String? // stored with hash obviously
    stripeConnectId String? @unique
    pictureUrl      String?

    emailVerified DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // relations
    eventsCreated Event[]
    invitations   Invitation[]

    postsMedia    Media[]
    marks         Mark[]
    contributions Contribution[]
    paymentLinks  StripeLink[]

    reporters     UserReport[]  @relation("reporter")
    reportedUsers UserReport[]  @relation("reported")
    eventReports  EventReport[]

    // mandatory assets
    accounts                  Account[]
    sessions                  Session[]
    mediaNotifications        MediaNotification[]
    contributionNotifications ContributionNotification[]
}

model Event {
    id          Int       @id @default(autoincrement())
    title       String?
    description String?
    location    String?
    date        DateTime?
    time        DateTime?
    pictureUrl  String?
    token       String?   @unique

    createdByUsername String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [createdByUsername], references: [username])

    invitations Invitation[]

    postsMedia    Media[]
    marks         Mark[]
    contributions Contribution[]
    paymentLinks  StripeLink[]
    eventArticles EventArticle[]
    eventReports  EventReport[]
}

model Invitation {
    id            Int    @id @default(autoincrement())
    guestUsername String
    eventId       Int

    status    StatusType @default(PENDING)
    createdAt DateTime   @default(now())
    repliedAt DateTime?

    guest User  @relation(fields: [guestUsername], references: [username], onDelete: Cascade)
    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

    @@index([guestUsername, eventId])
    @@index([eventId])
    @@index([status])
}

model Media {
    id               Int    @id @default(autoincrement())
    uploaderUsername String @default("DELETED_USER")
    eventId          Int
    url              String

    caption   String?
    mediaType String?
    fileType  String?
    fileSize  Int?
    createdAt DateTime @default(now())

    user  User  @relation(fields: [uploaderUsername], references: [username], onDelete: SetDefault)
    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

    notifications MediaNotification[]

    @@index([uploaderUsername, eventId])
}

// junction TABLE for event-specific wishlist entry
model EventArticle {
    id       Int           @id @default(autoincrement())
    eventId  Int
    itemId   Int
    userNote String? // additional note
    priority PriorityType?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    item  Item  @relation(fields: [itemId], references: [id], onDelete: Restrict)

    // @@id([eventId, itemId]) //! an item can be added ++ times
    Mark         Mark[]
    Contribution Contribution[]
    StripeLink   StripeLink[]

    @@index([eventId])
    @@index([itemId])
}

model Item {
    id          Int      @id @default(autoincrement())
    name        String?
    description String?
    imagesUrl   String?
    price       Decimal?

    retailerId Int? //! NULL => custom item
    retailer   Retailer? @relation(fields: [retailerId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    eventOccurences EventArticle[]
    marks           Mark[]
    contributions   Contribution[]
    StripeLink      StripeLink[]

    @@index([retailerId])
}

model Retailer {
    id     Int     @id @default(autoincrement())
    name   String?
    apiUrl String?
    items  Item[]
}

model Mark {
    markerUsername String // always a Guest
    articleId      Int
    eventId        Int? /// required by prisma
    itemId         Int? /// required by prisma

    type      MarkType
    createdAt DateTime @default(now())

    guest   User         @relation(fields: [markerUsername], references: [username], onDelete: Cascade)
    article EventArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
    event   Event?       @relation(fields: [eventId], references: [id], onDelete: Cascade)
    item    Item?        @relation(fields: [itemId], references: [id], onDelete: Cascade)

    @@id([markerUsername, articleId])
    @@index([eventId])
}

//! real money
//! SetDefault = deleted content 
//! it is about real money, do not delete records

model Contribution {
    id            Int    @id @default(autoincrement())
    guestUsername String @default("DELETED_USER") // always a Guest
    articleId     Int    @default(-1)
    eventId       Int? /// required by prisma
    itemId        Int? /// required by prisma

    cashAmount Decimal
    currency   String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt //! users can NOT withdraw back
    //! updated only if SetDefault

    guest   User         @relation(fields: [guestUsername], references: [username], onDelete: SetDefault)
    article EventArticle @relation(fields: [articleId], references: [id], onDelete: SetDefault)
    event   Event?       @relation(fields: [eventId], references: [id])
    item    Item?        @relation(fields: [itemId], references: [id], onDelete: SetNull)

    ContributionNotification ContributionNotification[]

    @@index([guestUsername, eventId])
}

enum StatusPayment {
    PENDING
    ACCEPTED
    EXPIRED
}

model StripeLink {
    id            String @id @default(cuid())
    guestUsername String @default("DELETED_USER")
    articleId     Int? // optional: `direct contribution` case
    eventId       Int? /// required by prisma
    itemId        Int? /// required by prisma

    stripePaymentLinkId String @unique
    paymentLinkUrl      String // reusable redirecting link

    amount   Decimal
    currency String
    status   StatusPayment

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    guest   User          @relation(fields: [guestUsername], references: [username], onDelete: SetDefault)
    article EventArticle? @relation(fields: [articleId], references: [id], onDelete: SetNull)
    event   Event?        @relation(fields: [eventId], references: [id])
    Item    Item?         @relation(fields: [itemId], references: [id], onDelete: SetNull)

    @@index([eventId, articleId, status])
}

//! reports

model UserReport {
    id                 Int      @id @default(autoincrement())
    reportedByUsername String
    reportedUsername   String
    reason             String?
    description        String?
    createdAt          DateTime @default(now())

    userHell User @relation("reported", fields: [reportedUsername], references: [username])
    userSane User @relation("reporter", fields: [reportedByUsername], references: [username])
}

model EventReport {
    id                 Int      @id @default(autoincrement())
    reportedByUsername String // NOT always a Guest
    reportedId         Int
    reason             String?
    description        String?
    createdAt          DateTime @default(now())

    user  User  @relation(fields: [reportedByUsername], references: [username])
    event Event @relation(fields: [reportedId], references: [id])
}

//! notification

enum NotificationAction {
    READ
    DELETE
}

model MediaNotification {
    id       Int                @id @default(autoincrement())
    username String
    mediaId  Int
    action   NotificationAction

    user  User  @relation(fields: [username], references: [username], onDelete: Cascade)
    media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

    @@index([username])
}

model ContributionNotification {
    id             Int                @id @default(autoincrement())
    username       String
    contributionId Int
    action         NotificationAction

    user User         @relation(fields: [username], references: [username], onDelete: Cascade)
    cash Contribution @relation(fields: [contributionId], references: [id], onDelete: Cascade)

    @@index([username])
}
