generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id                Int      @id @default(autoincrement())
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdByUsername String
  createdBy         User     @relation(fields: [createdByUsername], references: [username])

  @@index([name])
}

model Account {
  id                    String  @id @default(cuid())
  userUsername          String
  type                  String
  provider              String
  providerAccountId     String
  refreshToken          String?
  accessToken           String?
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String?
  sessionState          String?
  refreshTokenExpiresIn Int?
  user                  User    @relation(fields: [userUsername], references: [username], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userUsername String
  expires      DateTime
  user         User     @relation(fields: [userUsername], references: [username], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  username      String         @id @unique @default(cuid())
  email         String?        @unique
  fname         String?
  lname         String?
  password      String?
  iban          String?
  pictureUrl    String?
  emailVerified DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  contributions Contribution[]
  eventsCreated Event[]
  eventReports  EventReport[]
  invitations   Invitation[]
  marks         Mark[]
  postsMedia    Media[]
  posts         Post[]
  sessions      Session[]
  reporters     UserReport[]   @relation("reporter")
  reportedUsers UserReport[]   @relation("reported")
}

model Event {
  id                Int            @id @default(autoincrement())
  title             String?
  description       String?
  location          String?
  date              DateTime?
  time              DateTime?
  pictureUrl        String?
  createdByUsername String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  contributions     Contribution[]
  user              User           @relation(fields: [createdByUsername], references: [username])
  eventArticles     EventArticle[]
  eventReports      EventReport[]
  invitations       Invitation[]
  marks             Mark[]
  postsMedia        Media[]
}

model Invitation {
  id            Int       @id @default(autoincrement())
  guestUsername String
  eventId       Int
  status        String    @default("PENDING")
  createdAt     DateTime  @default(now())
  repliedAt     DateTime?
  event         Event     @relation(fields: [eventId], references: [id])
  guest         User      @relation(fields: [guestUsername], references: [username])
}

model Media {
  id               Int      @id @default(autoincrement())
  uploaderUsername String
  eventId          Int
  url              String?
  caption          String?
  mediaType        String?
  fileType         String?
  fileSize         Int?
  createdAt        DateTime @default(now())
  event            Event    @relation(fields: [eventId], references: [id])
  user             User     @relation(fields: [uploaderUsername], references: [username])
}

model Mark {
  id             Int           @id @default(autoincrement())
  markerUsername String
  eventId        Int
  articleId      Int
  type           String
  createdAt      DateTime      @default(now())
  item           ItemCatalogue @relation(fields: [articleId], references: [id])
  event          Event         @relation(fields: [eventId], references: [id])
  guest          User          @relation(fields: [markerUsername], references: [username])
}

/// stores the wishlists from all events and the quantity of each item
model EventArticle {
  eventId           Int
  itemId            Int
  quantityRequested Int?
  quantityFulfilled Int?
  priority          String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  item              ItemCatalogue @relation(fields: [itemId], references: [id])
  event             Event         @relation(fields: [eventId], references: [id])

  @@id([eventId, itemId])
}

model ItemCatalogue {
  id              Int            @id @default(autoincrement())
  name            String?
  description     String?
  imagesUrl       String?
  price           Decimal?
  retailerId      Int?
  retailerUrl     String?
  isCustom        Boolean
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  contributions   Contribution[]
  eventOccurences EventArticle[]
  retailer        Retailer?      @relation(fields: [retailerId], references: [id])
  marks           Mark[]
}

model Retailer {
  id     Int             @id @default(autoincrement())
  name   String?
  apiUrl String?
  items  ItemCatalogue[]
}

/// refers to a group contribution
model Contribution {
  id                  Int           @id @default(autoincrement())
  contributorUsername String
  eventId             Int
  articleId           Int
  cashAmount          Decimal?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  item                ItemCatalogue @relation(fields: [articleId], references: [id])
  event               Event         @relation(fields: [eventId], references: [id])
  guest               User          @relation(fields: [contributorUsername], references: [username])
}

model UserReport {
  id                 Int      @id @default(autoincrement())
  reportedUsername   String
  reportedByUsername String
  reason             String?
  description        String?
  createdAt          DateTime @default(now())
  userSane           User     @relation("reporter", fields: [reportedByUsername], references: [username])
  userHell           User     @relation("reported", fields: [reportedUsername], references: [username])
}

model EventReport {
  id                 Int      @id @default(autoincrement())
  eventId            Int
  reportedByUsername String
  reason             String?
  description        String?
  createdAt          DateTime @default(now())
  event              Event    @relation(fields: [eventId], references: [id])
  user               User     @relation(fields: [reportedByUsername], references: [username])
}


enum PriorityType {
  LOW
  MEDIUM
  HIGH
}
enum Status {
    PENDING
    ACCEPTED
    REJECTED
}
enum MarkType {
    PURCHASED
    RESERVED
    CONTRIBUTED
    // NULL: if the mark is null => delete row
}