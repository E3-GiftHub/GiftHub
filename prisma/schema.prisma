/**
 * ! documentation
 * https://pris.ly/d/prisma-schema
 * https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
 * https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
 */

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

//! enum

enum StatusType {
    PENDING
    ACCEPTED
    // REJECTED: if rejected => delete row
}

enum PriorityType {
    LOW
    MEDIUM
    HIGH
}

/// we keep this in case of new types of marks
enum MarkType {
    PURCHASED
    // NULL: if null => delete row
}

//! default models

// Necessary for Next auth
model Account {
    id                    String  @id @default(cuid())
    userUsername          String
    type                  String
    provider              String
    providerAccountId     String
    refreshToken          String?
    accessToken           String?
    expiresAt             Int?
    tokenType             String?
    scope                 String?
    idToken               String?
    sessionState          String?
    refreshTokenExpiresIn Int?

    user User @relation(fields: [userUsername], references: [username], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userUsername String
    expires      DateTime

    user User @relation(fields: [userUsername], references: [username], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//! implemented models

model User {
    username   String  @id @unique @default(cuid())
    email      String? @unique
    id         String? @unique
    fname      String?
    lname      String?
    password   String? // stored with hash obviously
    iban       String?
    pictureUrl String?

    emailVerified DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // relations
    eventsCreated Event[]
    invitations   Invitation[]

    postsMedia    Media[]
    marks         Mark[]
    contributions Contribution[]

    reporters     UserReport[]  @relation("reporter")
    reportedUsers UserReport[]  @relation("reported")
    eventReports  EventReport[]

    // mandatory assets
    accounts                 Account[]
    sessions                 Session[]
    MediaNotification        MediaNotification[]
    ContributionNotification ContributionNotification[]
}

model Event {
    id          Int       @id @default(autoincrement())
    title       String?
    description String?
    location    String?
    date        DateTime?
    time        DateTime?
    pictureUrl  String?

    createdByUsername String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [createdByUsername], references: [username])

    invitations Invitation[]

    postsMedia    Media[]
    marks         Mark[]
    contributions Contribution[]
    eventArticles EventArticle[]
    eventReports  EventReport[]
}

model Invitation {
    id            Int    @id @default(autoincrement())
    guestUsername String
    eventId       Int

    status    StatusType @default(PENDING)
    createdAt DateTime   @default(now())
    repliedAt DateTime?

    guest User  @relation(fields: [guestUsername], references: [username])
    event Event @relation(fields: [eventId], references: [id])

    @@index([guestUsername])
}

model Media {
    id               Int    @id @default(autoincrement())
    uploaderUsername String
    eventId          Int
    url              String

    caption   String?
    mediaType String?
    fileType  String?
    fileSize  Int?
    createdAt DateTime @default(now())

    user              User                @relation(fields: [uploaderUsername], references: [username])
    event             Event               @relation(fields: [eventId], references: [id])
    MediaNotification MediaNotification[]
}

// junction TABLE for event-specific wishlist entry
model EventArticle {
    eventId  Int
    itemId   Int
    userNote String? // additional note
    priority PriorityType?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    event Event @relation(fields: [eventId], references: [id])
    item  Item? @relation(fields: [itemId], references: [id])

    @@id([eventId, itemId])
}

model Item {
    id          Int      @id @default(autoincrement())
    name        String?
    description String?
    imagesUrl   String?
    price       Decimal?

    retailerId Int? //! NULL => custom item
    retailer   Retailer? @relation(fields: [retailerId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    eventOccurences EventArticle[]
    marks           Mark[]
    contributions   Contribution[]
}

model Mark {
    markerUsername String // always a Guest
    eventId        Int
    articleId      Int

    type      MarkType
    createdAt DateTime @default(now())

    guest User  @relation(fields: [markerUsername], references: [username])
    event Event @relation(fields: [eventId], references: [id])
    item  Item  @relation(fields: [articleId], references: [id])

    @@id([eventId, articleId])
}

model Retailer {
    id     Int     @id @default(autoincrement())
    name   String?
    apiUrl String?
    items  Item[]
}

model Contribution {
    id                  Int    @id @default(autoincrement())
    contributorUsername String // always a Guest
    eventId             Int
    articleId           Int

    cashAmount Decimal
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt // ! users can withdraw their contribution

    guest User  @relation(fields: [contributorUsername], references: [username])
    event Event @relation(fields: [eventId], references: [id])
    item  Item  @relation(fields: [articleId], references: [id])

    ContributionNotification ContributionNotification[]
}

//! reports

model UserReport {
    id                 Int      @id @default(autoincrement())
    reportedByUsername String
    reportedUsername   String
    reason             String?
    description        String?
    createdAt          DateTime @default(now())

    userHell User @relation("reported", fields: [reportedUsername], references: [username])
    userSane User @relation("reporter", fields: [reportedByUsername], references: [username])
}

model EventReport {
    id                 Int      @id @default(autoincrement())
    reportedByUsername String // NOT always a Guest
    reportedId         Int
    reason             String?
    description        String?
    createdAt          DateTime @default(now())

    user  User  @relation(fields: [reportedByUsername], references: [username])
    event Event @relation(fields: [reportedId], references: [id])
}

//! notification

enum NotificationAction {
    READ
    DELETE
}

model MediaNotification {
    id       Int                @id @default(autoincrement())
    username String
    mediaId  Int
    action   NotificationAction

    user  User  @relation(fields: [username], references: [username])
    media Media @relation(fields: [mediaId], references: [id])
}

model ContributionNotification {
    id             Int                @id @default(autoincrement())
    username       String
    contributionId Int
    action         NotificationAction

    user User         @relation(fields: [username], references: [username])
    cash Contribution @relation(fields: [contributionId], references: [id])
}
